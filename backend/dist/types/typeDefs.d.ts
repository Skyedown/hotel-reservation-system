export declare const typeDefs = "#graphql\n  scalar DateTime\n\n  type Admin {\n    id: ID!\n    email: String!\n    firstName: String!\n    lastName: String!\n    role: AdminRole!\n    createdAt: DateTime!\n    updatedAt: DateTime!\n  }\n\n  enum AdminRole {\n    STAFF\n    ADMIN\n  }\n\n  type Room {\n    id: ID!\n    roomNumber: String!\n    type: RoomType!\n    description: String!\n    price: Float!\n    capacity: Int!\n    amenities: [String!]!\n    images: [String!]!\n    isAvailable: Boolean!\n    reservations: [Reservation!]!\n    createdAt: DateTime!\n    updatedAt: DateTime!\n  }\n\n  enum RoomType {\n    STANDARD\n    DELUXE\n    SUITE\n    PRESIDENTIAL\n  }\n\n  type Reservation {\n    id: ID!\n    roomId: ID!\n    room: Room!\n    guestEmail: String!\n    guestFirstName: String!\n    guestLastName: String!\n    guestPhone: String\n    checkIn: DateTime!\n    checkOut: DateTime!\n    guests: Int!\n    totalPrice: Float!\n    status: ReservationStatus!\n    paymentStatus: PaymentStatus!\n    paymentIntentId: String\n    specialRequests: String\n    accessToken: String!\n    payments: [Payment!]!\n    lastStatusChange: DateTime!\n    notes: String\n    createdAt: DateTime!\n    updatedAt: DateTime!\n  }\n\n  enum ReservationStatus {\n    PENDING\n    CONFIRMED\n    CHECKED_IN\n    CHECKED_OUT\n    CANCELLED\n  }\n\n  enum PaymentStatus {\n    PENDING\n    PROCESSING\n    COMPLETED\n    FAILED\n    REFUNDED\n  }\n\n  type Payment {\n    id: ID!\n    reservationId: ID!\n    reservation: Reservation!\n    amount: Float!\n    currency: String!\n    stripePaymentIntentId: String!\n    status: PaymentStatus!\n    webhookEventId: String\n    failureReason: String\n    refundAmount: Float\n    createdAt: DateTime!\n    updatedAt: DateTime!\n  }\n\n  type PaymentStatusResult {\n    reservationId: ID!\n    paymentStatus: PaymentStatus!\n    reservationStatus: ReservationStatus!\n    paymentIntent: String\n    amount: Float!\n    payment: Payment\n  }\n\n  type RefundResult {\n    id: String!\n    amount: Float!\n    status: String!\n    reason: String\n  }\n\n  type AdminAuthPayload {\n    token: String!\n    admin: Admin!\n  }\n\n  input AdminLoginInput {\n    email: String!\n    password: String!\n  }\n\n  input CreateReservationInput {\n    roomId: ID!\n    guestEmail: String!\n    guestFirstName: String!\n    guestLastName: String!\n    guestPhone: String\n    checkIn: DateTime!\n    checkOut: DateTime!\n    guests: Int!\n    specialRequests: String\n  }\n\n  input CreateMultiRoomReservationInput {\n    guestEmail: String!\n    guestFirstName: String!\n    guestLastName: String!\n    guestPhone: String\n    specialRequests: String\n    rooms: [RoomReservationInput!]!\n  }\n\n  input RoomReservationInput {\n    roomId: ID!\n    checkIn: DateTime!\n    checkOut: DateTime!\n    guests: Int!\n  }\n\n\n  input CreateRoomInput {\n    roomNumber: String!\n    type: RoomType!\n    description: String!\n    price: Float!\n    capacity: Int!\n    amenities: [String!]!\n    images: [String!]!\n    isAvailable: Boolean\n  }\n\n  type Query {\n    # Public queries\n    rooms: [Room!]!\n    room(id: ID!): Room\n    availableRooms(checkIn: String!, checkOut: String!, guests: Int!): [Room!]!\n    \n    # Guest reservation access via token\n    reservation(accessToken: String!): Reservation\n    getPaymentStatus(accessToken: String!): PaymentStatusResult!\n    \n    # Admin queries\n    me: Admin\n    allReservations: [Reservation!]!\n    reservationById(id: ID!): Reservation\n  }\n\n  type Mutation {\n    # Admin authentication\n    adminLogin(input: AdminLoginInput!): AdminAuthPayload!\n    \n    # Public reservation creation\n    createReservation(input: CreateReservationInput!): Reservation!\n    createMultiRoomReservation(input: CreateMultiRoomReservationInput!): [Reservation!]!\n    \n    # Guest reservation management via token\n    cancelReservation(accessToken: String!): Reservation!\n    \n    # Payment processing\n    createPaymentIntent(accessToken: String!): String!\n    \n    # Admin only mutations\n    createRoom(input: CreateRoomInput!): Room!\n    updateRoom(id: ID!, input: CreateRoomInput!): Room!\n    deleteRoom(id: ID!): Boolean!\n    \n    updateReservationStatus(id: ID!, status: ReservationStatus!): Reservation!\n    processRefund(reservationId: ID!, amount: Float, reason: String): RefundResult!\n  }\n";
//# sourceMappingURL=typeDefs.d.ts.map